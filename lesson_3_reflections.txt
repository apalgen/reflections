When would you want to use a remote repository rather than keeping all your work local?

	When you want to collaborate with other people on the code or when you want to make it Open Source (like on GitHub).

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Because it takes the advantage of staying at a current state of the code and work with that fixed state without changing while you are editing and testing it.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are a copy  of a Git repository (from an other person) with witch you can work as it would be your own repository.
	Clones are a copy of a Git repository (from an other person) which leaves the remote origin in place and so you need the permission of the owner to push.
	Branches are like many different directions (for the evolving of the project) which often lead (merging) to the same goal.

What is the benefit of having a copy of the last known state of the remote stored locally?

	You can view the latest changes of the remote offline without interfering with your own local changes and if you wish merge your changes with the local copy of the remote.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Comment old changed lines out so that the old code is never lost, but it would be much longer code to read with all the comments and difficult to exchange the files, perhaps with Dropbox.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	When you want to experiment with things without breaking master you make a branch, but you need to merge it later into master. If you directly make changes in master you have no need for merging later but it's not a good idea if you work with other persons on the code.
